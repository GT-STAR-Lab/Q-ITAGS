/*
 * Graphically Recursive Simultaneous Task Allocation, Planning,
 * Scheduling, and Execution
 *
 * Copyright (C) 2020-2022
 *
 * Author: Andrew Messing
 * Author: Glen Neville
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
#pragma once

// Local
#include "grstapse/scheduling/milp/deterministic/deterministic_milp_scheduler_base.hpp"

namespace grstapse
{
    /*!
     * \brief A scheduler that handles one deterministic scenario for a stochastic robot scheduling problem
     */
    class DeterministicMilpSubscheduler : public DeterministicMilpSchedulerBase
    {
       public:
        // region Special Member Functions
        DeterministicMilpSubscheduler()                                         = delete;
        DeterministicMilpSubscheduler(const DeterministicMilpSubscheduler&)     = delete;
        DeterministicMilpSubscheduler(DeterministicMilpSubscheduler&&) noexcept = default;
        virtual ~DeterministicMilpSubscheduler()                                = default;
        DeterministicMilpSubscheduler& operator=(const DeterministicMilpSubscheduler&) = delete;
        DeterministicMilpSubscheduler& operator=(DeterministicMilpSubscheduler&&) noexcept = default;
        // endregion

        /*!
         * \brief Constructor
         *
         * \param index The index of the scenario
         * \param problem_inputs
         * \param mutex_indicators
         * \param master true if this subscheduler is part of the master/monolithic MILP problem or a LP subproblem
         */
        explicit DeterministicMilpSubscheduler(unsigned int index,
                                               const std::shared_ptr<const SchedulerProblemInputs>& problem_inputs,
                                               const std::shared_ptr<MutexIndicators>& mutex_indicators,
                                               bool master = true);

        //! \returns The makespan variable
        [[nodiscard]] inline GRBVar makespanVariable();

        //! \returns The optimality cut generated by this scheduler
        template <DualCutReturnType ReturnType, DualCutVariableType Variable>
        [[nodiscard]] ReturnType dualCut(
            GRBModel& model,
            std::unordered_map<std::pair<unsigned int, unsigned int>, Variable>& master_mutex_indicators) const
        {
            ReturnType rv = 0.0;
            // Handles eta
            rv += m_task_info.dualCut();
            // Handles beta, gamma, and delta
            rv += m_transition_info.dualCut<ReturnType, Variable>(master_mutex_indicators);
            // Handles alpha
            rv += dualCutAlphaComponent(model);
            return rv;
        }

        /*!
         *
         * \tparam ReturnType float, double, or GRBLinExpr
         * \tparam Variable float, double, or GRBVar
         *
         * \param master_mutex_indicators A map of the mutex indicators from the master problem
         *
         * \returns The optimality cut generated by this scheduler
         */
        template <DualCutReturnType ReturnType, DualCutVariableType Variable>
        [[nodiscard]] ReturnType dualCut(
            std::unordered_map<std::pair<unsigned int, unsigned int>, Variable>& master_mutex_indicators) const
        {
            return dualCut<ReturnType, Variable>(*m_model, master_mutex_indicators);
        }

        //! \returns The minimum makespan based solely on precedence transitions, task duration, and initial transitions
        [[nodiscard]] double longestFixedChain() const;

       protected:
        //! \copydoc MilpSolverBase
        [[nodiscard]] std::shared_ptr<const FailureReason> createObjective(GRBModel& model) final override;
        //! \copydoc MilpSchedulerBase
        [[nodiscard]] std::shared_ptr<const ScheduleBase> createSchedule(GRBModel& model) final override;

       private:
        /*!
         * \f[ \sum_{i \in I} \sum_{q \in Q} d_i^q \alpha_i^q \f]
         *
         * \returns The alpha component (s_i^q +d_i^q-C^q <= 0) of the optimality cut
         */
        [[nodiscard]] double dualCutAlphaComponent(GRBModel& model) const;

        using MilpSolverBase::solveMilp;

        unsigned int m_index;
        bool m_master;  //!< true if this subscheduler is part of the master/monolithic MILP problem or a LP subproblem

        friend class StochasticMilpSchedulerBase;
        friend class StochasticMilpScheduler;
        friend class BendersStochasticLpSubscheduler;
        friend class HeuristicApproximationStochasticScheduler;
    };

    // Inline Functions
    GRBVar DeterministicMilpSubscheduler::makespanVariable()
    {
        return m_makespan;
    }

}  // namespace grstapse